plugins {
    id 'kotlin-multiplatform' version '1.3.31'
    id 'de.solugo.gradle.nodejs' version '0.6.2'
}
repositories {
    maven { url 'https://kotlin.bintray.com/kotlinx' }
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    maven { url 'https://dl.bintray.com/kotlin/kotlin-js-wrappers' }
    mavenCentral()
    jcenter()

}
group 'com.nominanuda'
version '0.0.1'

apply plugin: 'maven-publish'

kotlin {
    jvm()
    js()
    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64
    //linuxX64("linux")
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation kotlin('reflect')
                implementation "org.jetbrains.kotlinx:kotlinx-io:$kotlinx_io_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-io:$kotlinx_io_version"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation("org.jetbrains.kotlinx:kotlinx-io-jvm:$kotlinx_io_version")
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-io-jvm:$kotlinx_io_version"
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation("org.jetbrains.kotlinx:kotlinx-io-js:$kotlinx_io_version")
                implementation("org.jetbrains.kotlinx:kotlinx-coroutines-io-js:$kotlinx_io_version")
                implementation("org.jetbrains:kotlin-extensions:1.0.1-pre.70-kotlin-1.3.21") {
                    exclude group: 'org.jetbrains.kotlinx', module: 'kotlinx-html-js' 
                }
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
//        linuxMain {
//            implementation kotlin('stdlib-native')
//            implementation("org.jetbrains.kotlinx:kotlinx-io-native:$kotlinx_io_version")
//            implementation("org.jetbrains.kotlinx:kotlinx-coroutines-io-native:$kotlinx_io_version")
//        }
//        linuxTest {
//        }
    }

    
}
compileKotlinJs.configure {
    kotlinOptions {
        metaInfo = true
        sourceMap = true
        moduleKind = 'umd'
        main = "noCall"
        sourceMapEmbedSources = 'always'
    }
}

compileTestKotlinJs.configure {
    kotlinOptions {
        metaInfo = true
        sourceMap = true
        moduleKind = 'umd'
        main = "call"
        sourceMapEmbedSources = 'always'
    }
}

task copyJsDependencies(type: Copy, dependsOn: compileTestKotlinJs) {
    from compileKotlinJs.destinationDir
    into "${buildDir}/node_modules"

    def configuration = configurations.jsTestRuntimeClasspath
    from(files {
        configuration.collect { File file ->
            file.name.endsWith(".jar")
                    ? zipTree(file.absolutePath).matching {
                include '*.js'
                include '*.js.map' }
                    : files()
        }
    }.builtBy(configuration))
}

//node {
//    version = '11.8.0'//nodeVersion
//    download = true
//}
//
//task installMocha(type: NpmTask) {
//    args = ['install', 'mocha']
//}
//
//task runMocha(type: NodeTask, dependsOn: [installMocha, compileTestKotlinJs, copyJsDependencies]) {
//    script = file('node_modules/mocha/bin/mocha')
//    args = [compileTestKotlinJs.outputFile]
//}
task runMocha(type: NodeJsTask, dependsOn: [compileTestKotlinJs, copyJsDependencies]) {//populateNodeModules, 
    require = ["mocha"]
    executable = "node_modules/mocha/bin/mocha"
    args = [projectDir.toPath().relativize(file(compileTestKotlinJs.outputFile).toPath())]
}
jsTest.dependsOn runMocha
